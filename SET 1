**1**

#include <stdio.h>
#define PROCESSES 4
#define RESOURCES 3
void checkSafety(int available[], int claim[][RESOURCES], int allocation[][RESOURCES]);
int main() {
    int available[RESOURCES] = {19, 3, 6};
    int claim[PROCESSES][RESOURCES] = {{3, 2, 2},
                                       {6, 1, 3},
                                       {3, 1, 4},
                                       {4, 2, 2}};
    int allocation[PROCESSES][RESOURCES] = {{1, 0, 0},
                                            {6, 1, 2},
                                            {2, 1, 1},
                                            {0, 0, 2}};
    checkSafety(available, claim, allocation);
    return 0;
}
void checkSafety(int available[], int claim[][RESOURCES], int allocation[][RESOURCES]) {
    int work[RESOURCES], finish[PROCESSES], safeSequence[PROCESSES];
    int i, j, count = 0;
    for (i = 0; i < RESOURCES; i++) {
        work[i] = available[i];
    }
    for (i = 0; i < PROCESSES; i++) {
        finish[i] = 0;
    }
    while (count < PROCESSES) {
        int found = 0;
        for (i = 0; i < PROCESSES; i++) {
            if (finish[i] == 0) {
                int canAllocate = 1;
                for (j = 0; j < RESOURCES; j++) {
                    if (claim[i][j] - allocation[i][j] > work[j]) {
                        canAllocate = 0;
                        break;
                    }
                }
                if (canAllocate) {
                    for (j = 0; j < RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in an unsafe state!\n");
            return;
        }
    }
    printf("System is in a safe state. Safe sequence: ");
    for (i = 0; i < PROCESSES; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
}
**2**

#include <stdio.h>
#define MAX_FRAMES 3
int main() {
    int pageFrames[MAX_FRAMES] = {-1, -1, -1};
    int pageReference[] = {4, 1, 2, 4, 3, 2, 1, 5};
    int pageFaults = 0;
    int i, j, k;
    for (i = 0; i < sizeof(pageReference) / sizeof(pageReference[0]); i++) {
        int page = pageReference[i];
        int pageFound = 0;
        for (j = 0; j < MAX_FRAMES; j++) {
            if (pageFrames[j] == page) {
                pageFound = 1;
                break;
            }
        }
        if (!pageFound) {
            int oldestIndex = 0;
            for (j = 1; j < MAX_FRAMES; j++) {
                if (pageReference[j] < pageReference[oldestIndex])
                    oldestIndex = j;
            }
            pageFrames[oldestIndex] = page;
            pageFaults++;
        }

        printf("Page Frames: ");
        for (k = 0; k < MAX_FRAMES; k++) {
            printf("%d ", pageFrames[k]);
        }
        printf("\n");
    }

    printf("Number of Page Faults: %d\n", pageFaults);
    return 0;
}
**3**

//Process  Burst Time
//P1       5
//P2       3
//P3       8
//P4       2
#include <stdio.h>
struct Process {
    int id;
    int burstTime;
};
void calculateTimes(struct Process processes[], int n);
int main() {
    struct Process processes[] = {{1, 5}, {2, 3}, {3, 8}, {4, 2}};
    int n = sizeof(processes) / sizeof(processes[0]);
    calculateTimes(processes, n);
    return 0;
}
void calculateTimes(struct Process processes[], int n) {
    int waitingTime[n], turnaroundTime[n];
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    waitingTime[0] = 0;
    turnaroundTime[0] = processes[0].burstTime;
    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + processes[i - 1].burstTime;
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
    float averageWaitingTime = 0, averageTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        averageWaitingTime += waitingTime[i];
        averageTurnaroundTime += turnaroundTime[i];
    }
    averageWaitingTime /= n;
    averageTurnaroundTime /= n;
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }
    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}
**4**

#include <stdio.h>
#define PARTITIONS 6
void firstFit(int memory[], int processes[], int n);
int main() {
    int memory[PARTITIONS] = {300, 600, 350, 200, 750, 125};
    int processes[] = {115, 500, 358, 200, 375};
    int n = sizeof(processes) / sizeof(processes[0]);
    firstFit(memory, processes, n);
    return 0;
}
void firstFit(int memory[], int processes[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
        for (int j = 0; j < PARTITIONS; j++) {
            if (memory[j] >= processes[i]) {
                allocation[i] = j;
                memory[j]-= processes[i];
                break;
            }
        }
    }
    printf("Process\tSize\tPartition\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
    printf("\nFinal State of Memory:\n");
    for (int i = 0; i < PARTITIONS; i++) {
        printf("%d KB\t", memory[i]);
    }
    printf("\n");
}
