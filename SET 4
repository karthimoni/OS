**1**
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_FILES 100
#define MAX_FILENAME 20
#define MAX_DIRNAME 20
typedef struct {
    char filename[MAX_FILENAME];
} File;
typedef struct {
    char dirname[MAX_DIRNAME];
    File files[MAX_FILES];
    int file_count;
} Directory;
void createDirectory(Directory *dir, const char *dirname) {
    strcpy(dir->dirname, dirname);
    dir->file_count = 0;
}
void addFile(Directory *dir, const char *filename) {
    if (dir->file_count < MAX_FILES) {
        strcpy(dir->files[dir->file_count].filename, filename);
        dir->file_count++;
        printf("File '%s' added to directory '%s'\n", filename, dir->dirname);
    } else {
        printf("Directory is full. Cannot add more files.\n");
    }
}
int main() {
    Directory cseDirectory;
    createDirectory(&cseDirectory, "CSE");
    addFile(&cseDirectory, "A");
    addFile(&cseDirectory, "B");
    addFile(&cseDirectory, "C");
    return 0;
}

**2**
#include <stdio.h>
int main() {
    int pageFrames = 3;
    int pageReference[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int pageFaults = 0;
    int pageTable[pageFrames];
    for (int i = 0; i < pageFrames; i++) {
        pageTable[i] = -1;
    }
    for (int i = 0; i < 20; i++) {
        int page = pageReference[i];
        int found = 0;

        for (int j = 0; j < pageFrames; j++) {
            if (pageTable[j] == page) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int replaceIndex = 0;
            int maxFutureIndex = -1;
            for (int j = 0; j < pageFrames; j++) {
                int futureIndex = 0;
                for (int k = i + 1; k < 20; k++) {
                    if (pageReference[k] == pageTable[j]) {
                        break;
                    }
                    futureIndex++;
                }
                if (futureIndex > maxFutureIndex) {
                    maxFutureIndex = futureIndex;
                    replaceIndex = j;
                }
            }
            pageTable[replaceIndex] = page;
            pageFaults++;
        }
    }
    printf("Number of Page Faults: %d\n", pageFaults);
    return 0;
}

**3**
#include <stdio.h>
#include <stdlib.h>
int main() {
    int tracks = 9;
    int trackPositions[] = {55, 58, 60, 70, 18, 90, 150, 160, 184};
    int headMovement = 0;
    for (int i = 1; i < tracks; i++) {
        headMovement += abs(trackPositions[i] - trackPositions[i - 1]);
    }
    printf("Average Head Movement: %f\n", (float)headMovement / tracks);
    return 0;
}

**4**
#include <stdio.h>
int main() {
    int burstTimes[] = {10, 15, 25};
    int processes = 3;
    int waitingTime[processes], turnaroundTime[processes];
    waitingTime[0] = 0;
    turnaroundTime[0] = burstTimes[0];
    for (int i = 1; i < processes; i++) {
        waitingTime[i] = turnaroundTime[i - 1];
        turnaroundTime[i] = waitingTime[i] + burstTimes[i];
    }
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (int i = 0; i < processes; i++) {
        avgWaitingTime += waitingTime[i];
        avgTurnaroundTime += turnaroundTime[i];
    }
    avgWaitingTime /= processes;
    avgTurnaroundTime /= processes;
    printf("Average Waiting Time: %f\n", avgWaitingTime);
    printf("Average Turnaround Time: %f\n", avgTurnaroundTime);
    return 0;
}
