**1**
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
sem_t room;
sem_t chopstick[5];
void * philosopher(void *);
void eat(int);
int main()
{
	int i,a[5];
	pthread_t tid[5];
	sem_init(&room,0,4);
	for(i=0;i<5;i++)
		sem_init(&chopstick[i],0,1);
	for(i=0;i<5;i++){
		a[i]=i;
		pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]);
	}
	for(i=0;i<5;i++)
		pthread_join(tid[i],NULL);
}
void * philosopher(void * num)
{
	int phil=*(int *)num;
	sem_wait(&room);
	printf("\nPhilosopher %d has entered room",phil);
	sem_wait(&chopstick[phil]);
	sem_wait(&chopstick[(phil+1)%5]);
	eat(phil);
	sleep(2);
	printf("\nPhilosopher %d has finished eating",phil);
	sem_post(&chopstick[(phil+1)%5]);
	sem_post(&chopstick[phil]);
	sem_post(&room);
}
void eat(int phil)
{
	printf("\nPhilosopher %d is eating",phil);
}

**2**
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct File {
    char name[20];
};
struct Directory {
    char name[20];
    struct File files[10];
};
struct User {
    char name[20];
    struct Directory directory;
};
int main() {
    struct User users[3];
    strcpy(users[0].name, "user1");
    strcpy(users[1].name, "user2");
    strcpy(users[2].name, "user3");
    for (int i = 0; i < 3; i++) {
        strcpy(users[i].directory.name, users[i].name);
        for (int j = 0; j < i + 1; j++) {
            sprintf(users[i].directory.files[j].name, "file%d", j + 1);
        }
    }
    for (int i = 0; i < 3; i++) {
        printf("User: %s\n", users[i].name);
        printf("Directory: %s\n", users[i].directory.name);
        for (int j = 0; j < i + 1; j++) {
            printf("  File: %s\n", users[i].directory.files[j].name);
        }
        printf("\n");
    }
    return 0;
}

**3**
#include <stdio.h>
#include <stdlib.h>
void SCAN(int tracks[], int n, int head) {
    int total_head_movement = 0;
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (tracks[j] > tracks[j + 1]) {
                int temp = tracks[j];
                tracks[j] = tracks[j + 1];
                tracks[j + 1] = temp;
            }
        }
    }
    int head_index = 0;
    for (int i = 0; i < n; ++i) {
        if (tracks[i] > head) {
            head_index = i;
            break;
        }
    }
    for (int i = head_index; i < n; ++i) {
        total_head_movement += abs(tracks[i] - head);
        head = tracks[i];
    }
    for (int i = head_index - 1; i >= 0; --i) {
        total_head_movement += abs(tracks[i] - head);
        head = tracks[i];
    }
    printf("Total Head Movement: %d\n", total_head_movement);
}
int main() {
    int tracks[] = {58, 60, 70, 18};
    int n = sizeof(tracks) / sizeof(tracks[0]);
    int head = 55;
    SCAN(tracks, n, head);
    return 0;
}

**4**
#include <stdio.h>
#include <stdint.h>
#define BLOCK_SIZE 8192 
#define POINTER_SIZE 4    
#define DIRECT_BLOCKS 12
#define INDIRECT_BLOCKS (BLOCK_SIZE / POINTER_SIZE)
#define DOUBLE_INDIRECT_BLOCKS (INDIRECT_BLOCKS * INDIRECT_BLOCKS)
#define TRIPLE_INDIRECT_BLOCKS (DOUBLE_INDIRECT_BLOCKS * INDIRECT_BLOCKS)
uint64_t findAvailableBlocks(uint64_t allocatedBlocks[], uint64_t numBlocks) {
    for (uint64_t i = 0; i < numBlocks; ++i) {
        if (allocatedBlocks[i] == 0) {
            allocatedBlocks[i] = 1;
            return i;
        }
    }
    return -1; 
}
uint64_t calculateMaxFileSize(uint64_t allocatedBlocks[], uint64_t numBlocks) {
    uint64_t block_size_bytes = BLOCK_SIZE;
    uint64_t pointer_size_bytes = POINTER_SIZE;
    uint64_t direct_block_size = DIRECT_BLOCKS * block_size_bytes;
    uint64_t single_indirect_block_size = INDIRECT_BLOCKS * block_size_bytes;
    uint64_t double_indirect_block_size = DOUBLE_INDIRECT_BLOCKS * block_size_bytes;
    uint64_t triple_indirect_block_size = TRIPLE_INDIRECT_BLOCKS * block_size_bytes;
    uint64_t max_file_size = direct_block_size +
                             single_indirect_block_size +
                             double_indirect_block_size +
                             triple_indirect_block_size;
    uint64_t allocatedSize = 0;
    while (allocatedSize < max_file_size) {
        uint64_t blockIndex = findAvailableBlocks(allocatedBlocks, numBlocks);
        if (blockIndex == -1) {
            printf("Error: No available blocks.\n");
            break;
        }
        printf("Allocated block at index %llu\n", blockIndex);
        allocatedSize += block_size_bytes;
    }

    return max_file_size;
}
int main() {
    uint64_t numBlocks = DIRECT_BLOCKS + INDIRECT_BLOCKS + DOUBLE_INDIRECT_BLOCKS + TRIPLE_INDIRECT_BLOCKS;
    uint64_t allocatedBlocks[numBlocks];
    for (uint64_t i = 0; i < numBlocks; ++i) {
        allocatedBlocks[i] = 0; 
    }
    uint64_t maxFileSize = calculateMaxFileSize(allocatedBlocks, numBlocks);
    printf("Maximum File Size: %llu bytes\n", maxFileSize);
    return 0;
}
