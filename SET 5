Here's a simple C program that implements the worst-fit algorithm for memory allocation based on the provided test case:

c
#include <stdio.h>

#define MAX_PARTITIONS 6
#define MAX_PROCESSES 5

void worstFit(int partitions[], int numPartitions, int processes[], int numProcesses) {
    int allocation[MAX_PROCESSES];

    for (int i = 0; i < numProcesses; i++) {
        int worstIdx = -1;

        for (int j = 0; j < numPartitions; j++) {
            if (partitions[j] >= processes[i]) {
                if (worstIdx == -1 || partitions[j] > partitions[worstIdx]) {
                    worstIdx = j;
                }
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;

            // Allocate the memory block
            partitions[worstIdx] -= processes[i];
        } else {
            allocation[i] = -1; // Unable to allocate
        }
    }

    // Display the allocation results
    printf("Process\t\tMemory Partition\n");
    for (int i = 0; i < numProcesses; i++) {
        printf("P%d\t\t", i + 1);
        if (allocation[i] != -1) {
            printf("%d KB\n", processes[i]);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    // Test case
    int memoryPartitions[] = {300, 600, 350, 200, 750, 125};
    int processes[] = {115, 500, 358, 200, 375};
    int numPartitions = sizeof(memoryPartitions) / sizeof(memoryPartitions[0]);
    int numProcesses = sizeof(processes) / sizeof(processes[0]);

    // Implement worst-fit algorithm and display results
    worstFit(memoryPartitions, numPartitions, processes, numProcesses);

    return 0;
}


This program implements the worst-fit algorithm to allocate memory blocks for processes based on the provided memory partitions. It displays the outcome for the test case with processes of various sizes.
