**1**
#include<stdio.h>
void findWaitingTime(int processes[], int n, int bt[], int wt[]) {
    wt[0] = 0;
    for (int i = 1; i < n ; i++ )
        wt[i] = bt[i-1] + wt[i-1];
}
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}
void findAvgTime(int processes[], int n, int bt[]) {
    int wt[n], tat[n];
    findWaitingTime(processes, n, bt, wt);
    findTurnAroundTime(processes, n, bt, wt, tat);
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
    }
    printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_tat / (float)n);
}
int main() {
    int processes[] = {0, 1, 2};
    int n = sizeof processes / sizeof processes[0];
    int burst_time[] = {2, 4, 8};
    findAvgTime(processes, n, burst_time);
    return 0;
}

**2**
#include <stdio.h>
void calculateNeedMatrix(int allocation[][3], int max[][3], int need[][3], int processes, int resources) {
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}
int main() {
    int processes = 5;
    int resources = 3;
    int allocation[5][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    int max[5][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int need[5][3];
    calculateNeedMatrix(allocation, max, need, processes, resources);
    printf("Need Matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    return 0;
}

**3**
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
void printOddNumbers() {
    printf("Odd Numbers: ");
    for (int i = 1; i <= 10; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
}
void printEvenNumbers() {
    printf("Even Numbers: ");
    for (int i = 2; i <= 10; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
}
void printMultiplesOf3() {
    printf("Multiples of 3: ");
    for (int i = 3; i <= 30; i += 3) {
        printf("%d ", i);
    }
    printf("\n");
}
void printMultiplesOf5() {
    printf("Multiples of 5: ");
    for (int i = 5; i <= 50; i += 5) {
        printf("%d ", i);
    }
    printf("\n");
}
int main() {
    for (int i = 0; i < 4; ++i) {
        pid_t pid = fork();
        if (pid == 0) {
            switch (i) {
                case 0:
                    printOddNumbers();
                    break;
                case 1:
                    printEvenNumbers();
                    break;
                case 2:
                    printMultiplesOf3();
                    break;
                case 3:
                    printMultiplesOf5();
                    break;
                default:
                    break;
            }
            _exit(0);
        } else if (pid < 0) {
            perror("Fork failed");
            return 1;
        } else {
            wait(NULL);
        }
    }
    return 0;
}

**4**
#include <stdio.h>
#include <stdlib.h>
#define NUM_PARTITIONS 6
#define NUM_PROCESSES 5
void bestFit(int partitions[], int m, int processes[], int n) {
    int allocation[NUM_PROCESSES];
    for (int i = 0; i < n; i++) {
        int bestFitIdx = -1;
        for (int j = 0; j < m; j++) {
            if (partitions[j] >= processes[i]) {
                if (bestFitIdx == -1 || partitions[j] < partitions[bestFitIdx]) {
                    bestFitIdx = j;
                }
            }
        }
        if (bestFitIdx != -1) {
            allocation[i] = bestFitIdx;
            partitions[bestFitIdx] -= processes[i];
        } else {
            allocation[i] = -1; // Unable to allocate
        }
    }
    printf("\nProcess\t Process Size\t Allocated Partition\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t %d KB\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}
int main() {
    int memoryPartitions[] = {300, 600, 350, 200, 750, 125};
    int processes[] = {115, 500, 358, 200, 375};
    printf("Memory Partitions: ");
    for (int i = 0; i < NUM_PARTITIONS; i++) {
        printf("%d KB ", memoryPartitions[i]);
    }
    printf("\nProcesses: ");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf("%d KB ", processes[i]);
    }
    bestFit(memoryPartitions, NUM_PARTITIONS, processes, NUM_PROCESSES);
    return 0;
}
